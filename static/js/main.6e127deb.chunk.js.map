{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","quotes","setQuotes","randomQuotes","setRandomQuotes","color","setColor","opacity","setOpacity","useEffect","a","fetch","response","json","data","randomIndex","Math","floor","random","length","fetchData","style","backgroundColor","minHeight","transition","className","textAlign","author","backgroundPosition","fontSize","text","border","onClick","colors","randIndex","randColorIndex","href","encodeURIComponent","target","map","quote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAoGeA,MAhGf,WAAgB,IAAD,IACeC,IAAMC,SAAS,IAD9B,mBACNC,EADM,KACEC,EADF,OAE2BH,IAAMC,SAAS,IAF1C,mBAENG,EAFM,KAEQC,EAFR,OAGaL,IAAMC,SAAS,sBAH5B,mBAGNK,EAHM,KAGCC,EAHD,OAIiBP,IAAMC,SAAS,IAJhC,mBAINO,EAJM,KAIGC,EAJH,KAuDb,OAjDAT,IAAMU,WAAU,WAAM,4CACpB,gCAAAC,EAAA,sEACyBC,MAAM,+BAD/B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,OAEQC,EAFR,OAKEZ,EAAUY,GACNC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAClDf,EAAgBU,EAAKC,IAPvB,4CADoB,uBAAC,WAAD,wBAUpBK,KAGC,IAqCD,sBAAKC,MAAO,CAACC,gBAAiBjB,EAAOkB,UAAW,QAASC,WAAY,YAArE,UACE,qBAAKC,UAAU,eAAf,kCACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,cAAf,UACOtB,EACG,qCACA,qBAAIkB,MAAO,CAAChB,MAAOA,EAAOmB,WAAY,WAAYE,UAAW,UAAcD,UAAU,aAArF,eAAqGtB,EAAawB,QAAU,eAC5H,uBAAGF,UAAU,eAAeJ,MAAO,CAACd,YAApC,sBAAqD,CAACF,MAAOA,EAAOmB,WAAY,WAAYI,mBAAoB,aAAcC,SAAU,OAAQH,UAAW,WAA3J,0BAAgL,aAAhL,0BAA4L,sBAAMD,UAAU,aAAhB,eAA2CtB,EAAa2B,OAApP,OAGF,yCAGF,sBAAKL,UAAU,kBAAf,UACE,8BACA,wBAAQJ,MAAO,CAACC,gBAAiBjB,EAAOmB,WAAY,WAAYO,OAAQ1B,GAAQoB,UAAU,sCAAsCO,QAlD5H,WAElB,IAAMC,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WASEC,EAAYlB,KAAKC,MAAMD,KAAKE,SAAWjB,EAAOkB,QAC9CgB,EAAiBnB,KAAKC,MAAMD,KAAKE,SAAWe,EAAOd,QACvDf,EAAgBH,EAAOiC,IACvB5B,EAAS2B,EAAOE,IAChB3B,EATgB,CAEdD,QAAS,GAOQA,KAoBL,yBAEA,gCACA,mBAAGc,MAAO,CAACC,gBAAiBjB,EAAOmB,WAAY,WAAYO,OAAQ,QAASK,KAC1E,8EAAgFC,mBAC9E,IAAMlC,EAAa2B,KAAO,KAAO3B,EAAawB,QAE9CW,OAAO,SAASb,UAAU,wBAJ9B,SAIsD,mBAAGA,UAAU,+BACnE,mBAAGJ,MAAO,CAACC,gBAAiBjB,EAAOmB,WAAY,WAAYO,OAAQ,QAAUK,KAAK,0CAA0CE,OAAO,SAASb,UAAU,uBAAtJ,SAA6K,mBAAGA,UAAU,4BAMjMxB,EAAOsC,KAAI,SAAAC,GAAK,OACf,8BAAMvC,EAAO6B,iBC9EVW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e127deb.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n  const [quotes, setQuotes] = React.useState([]);\n  const [randomQuotes, setRandomQuotes] = React.useState([]);\n  const [color, setColor] = React.useState(\"rgb(138, 220, 378)\");\n  const [opacity, setOpacity] = React.useState([]);\n\n  React.useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\"https://type.fit/api/quotes\");\n      const data = await response.json();\n\n\n      setQuotes(data);\n      let randomIndex = Math.floor(Math.random() * data.length);\n      setRandomQuotes(data[randomIndex])\n    }\n    fetchData();\n\n  \n  }, []);\n\n  const getNewQuote = () => {\n\n    const colors = [\n      \"#9A4545\",\n      \"#92BC91\",\n      \"#5893AB\",\n      \"#FF6433\",\n      \"#FF8A33\",\n      \"#FFB833\",\n      \"#383C28\",\n      \"#2C2B45\",\n      \"#157015\",\n      \"#8786B3\",\n      \"#765F78\",\n      \"#33DBFF\",\n      \"#132025\",\n      \"#5433FF\",\n      \"#BE33FF\",\n\n    ];\n\n    const styling = {\n      \n      opacity: 0,\n    }\n\n    let randIndex = Math.floor(Math.random() * quotes.length);\n    let randColorIndex = Math.floor(Math.random() * colors.length);\n    setRandomQuotes(quotes[randIndex])\n    setColor(colors[randColorIndex])\n    setOpacity(styling[opacity])\n    \n  }\n\n  return (\n    <div style={{backgroundColor: color, minHeight: \"100vh\", transition: 'all 0.5s'}}>\n      <div className=\"card-header1\">Inspirational Quotes</div>\n        <div className=\"container pt-5\">\n          <div className=\"style-jumbo\">\n                {randomQuotes ? (\n                    <>    \n                    <h5 style={{color: color, transition: 'all 0.8s', textAlign: 'center'}}    className=\"card-title\">- {randomQuotes.author || \"No author\"}</h5>  \n                    <p className=\"font-styling\" style={{opacity}} style={{color: color, transition: 'all 1.1s', backgroundPosition: '100%, 100%', fontSize: '25px', textAlign: 'center'}} className=\"card-text\"><span className=\"first-span\">&quot;</span>{randomQuotes.text}</p>\n                    </>\n                ) : (\n                  <h2>Loading</h2>\n                )}\n\n                <div className=\"flexing-buttons\">\n                  <div>\n                  <button style={{backgroundColor: color, transition: 'all 0.6s', border: color}} className=\"btn btn-primary ml-3 button-styling\" onClick={getNewQuote}>New Quote</button>\n                  </div>\n                  <div>\n                  <a style={{backgroundColor: color, transition: 'all 0.6s', border: 'none'}} href={\n                    \"https://twitter.com/intent/tweet/hashtags?quotes&related=freecodecamp&text=\" + encodeURIComponent (\n                      '\"' + randomQuotes.text + '\" ' + randomQuotes.author \n                    )\n                    } target=\"_blank\" className=\"btn btn-warning link1\"><i className=\"fa fa-twitter logo-style\"></i></a>\n                  <a style={{backgroundColor: color, transition: 'all 0.6s', border: 'none'}}  href=\"https://www.tumblr.com/explore/trending\" target=\"_blank\" className=\"link2 btn btn-danger\"><i className=\"fa fa-tumblr\"></i></a>\n                  </div>\n                </div>\n          </div>\n          \n\n          {quotes.map(quote => (\n            <div>{quotes.text}</div>\n          ))}\n        </div>\n    </div>\n\n\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}